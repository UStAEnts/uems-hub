// Generated by gen.mjs @ 2022-07-05T15:48:44.989Z - avoid editing this file by hand!
import * as zod from 'zod';
import { BaseSchema } from '../BaseSchema';
import { ZodValidator } from '../messaging/MessageValidator';
import { UserValidators } from "../user/UserValidators";
import { TopicValidators } from "../topic/TopicValidators";

export namespace CommentValidators {

	import REQUEST_CORE_SCHEMA = BaseSchema.REQUEST_CORE_SCHEMA;
	import RESPONSE_CORE_SCHEMA = BaseSchema.RESPONSE_CORE_SCHEMA;
	import ZUser = UserValidators.ZUser;
	import ZTopic = TopicValidators.ZTopic;

	export const ZComment = zod.object({
		id: zod.string()
			.describe("The unique identifier for this comment"),
		assetType: zod.string()
			.describe("The category of assets on which this comment has been placed, used to locate the service relevant to this comment"),
		assetID: zod.string()
			.describe("The unique identifier for the asset against which this comment has been placed"),
		poster: ZUser
			.describe("The user who created this comment"),
		posted: zod.number()
			.describe("The time (unix-second timestamp UTC) at which this comment was created"),
		topic: ZTopic
			.optional()
			.describe("The topic under which this comment has been assigned"),
		requiresAttention: zod.boolean()
			.optional()
			.describe("If this comment has been marked as 'requiring attention' by another user"),
		attendedDate: zod.number()
			.optional()
			.describe("The time (unix-second timestamp UTC) at which this comment was attended to by another user"),
		attendedBy: ZUser
			.optional()
			.describe("The user who attended to this comment to disable the flag"),
		body: zod.string()
			.describe("The main content of the comment"),
	});
	export type CommentRepresentation = zod.infer<typeof ZComment>;
	export const ZCommentShallow = zod.object({
		id: zod.string()
			.describe("The unique identifier for this comment"),
		assetType: zod.string()
			.describe("The category of assets on which this comment has been placed, used to locate the service relevant to this comment"),
		assetID: zod.string()
			.describe("The unique identifier for the asset against which this comment has been placed"),
		poster: zod.string()
			.describe("The user who created this comment"),
		posted: zod.number()
			.describe("The time (unix-second timestamp UTC) at which this comment was created"),
		topic: zod.string()
			.describe("The topic under which this comment has been assigned"),
		requiresAttention: zod.boolean()
			.optional()
			.describe("If this comment has been marked as 'requiring attention' by another user"),
		attendedDate: zod.number()
			.optional()
			.describe("The time (unix-second timestamp UTC) at which this comment was attended to by another user"),
		attendedBy: zod.string()
			.describe("The user who attended to this comment to disable the flag"),
		body: zod.string()
			.describe("The main content of the comment"),
	});
	export type CommentShallowRepresentation = zod.infer<typeof ZCommentShallow>;
	export const ZCommentRead = REQUEST_CORE_SCHEMA('READ').extend({
		id: zod.array(zod.string())
			.optional()
			.describe("The unique identifier for this comment"),
		assetType: zod.string()
			.optional()
			.describe("The category of assets on which this comment has been placed, used to locate the service relevant to this comment"),
		assetID: zod.string()
			.optional()
			.describe("The unique identifier for the asset against which this comment has been placed"),
		poster: zod.string()
			.optional()
			.describe("The user who created this comment"),
		posted: zod.object({
			greater: zod.number(),
			less: zod.number(),
		}).or(zod.number())
			.optional()
			.describe("The time (unix-second timestamp UTC) at which this comment was created"),
		topic: zod.string()
			.optional()
			.describe("The topic under which this comment has been assigned"),
		requiresAttention: zod.boolean()
			.optional()
			.describe("If this comment has been marked as 'requiring attention' by another user"),
		attendedDate: zod.object({
			greater: zod.number(),
			less: zod.number(),
		}).or(zod.number())
			.optional()
			.describe("The time (unix-second timestamp UTC) at which this comment was attended to by another user"),
		attendedBy: zod.string()
			.optional()
			.describe("The user who attended to this comment to disable the flag"),
		body: zod.string()
			.optional()
			.describe("The main content of the comment"),
	});
	export type CommentRead = zod.infer<typeof ZCommentRead>;

	export const ZCommentCreate = REQUEST_CORE_SCHEMA('CREATE').extend({
		assetType: zod.string()
			.describe("The category of assets on which this comment has been placed, used to locate the service relevant to this comment"),
		assetID: zod.string()
			.describe("The unique identifier for the asset against which this comment has been placed"),
		poster: zod.string()
			.describe("The user who created this comment"),
		posted: zod.number()
			.describe("The time (unix-second timestamp UTC) at which this comment was created"),
		topic: zod.string()
			.describe("The topic under which this comment has been assigned"),
		requiresAttention: zod.boolean()
			.optional()
			.describe("If this comment has been marked as 'requiring attention' by another user"),
		attendedDate: zod.number()
			.optional()
			.describe("The time (unix-second timestamp UTC) at which this comment was attended to by another user"),
		attendedBy: zod.string()
			.describe("The user who attended to this comment to disable the flag"),
		body: zod.string()
			.describe("The main content of the comment"),
	});
	export type CommentCreate = zod.infer<typeof ZCommentCreate>;

	export const ZCommentUpdate = REQUEST_CORE_SCHEMA('UPDATE').extend({
		id: zod.string()
			.describe("The unique identifier for this comment"),
		assetType: zod.string()
			.optional()
			.describe("The category of assets on which this comment has been placed, used to locate the service relevant to this comment"),
		assetID: zod.string()
			.optional()
			.describe("The unique identifier for the asset against which this comment has been placed"),
		poster: zod.string()
			.optional()
			.describe("The user who created this comment"),
		posted: zod.number()
			.optional()
			.describe("The time (unix-second timestamp UTC) at which this comment was created"),
		topic: zod.string()
			.optional()
			.describe("The topic under which this comment has been assigned"),
		requiresAttention: zod.boolean()
			.optional()
			.describe("If this comment has been marked as 'requiring attention' by another user"),
		attendedDate: zod.number()
			.optional()
			.describe("The time (unix-second timestamp UTC) at which this comment was attended to by another user"),
		attendedBy: zod.string()
			.optional()
			.describe("The user who attended to this comment to disable the flag"),
		body: zod.string()
			.optional()
			.describe("The main content of the comment"),
	});
	export type CommentUpdate = zod.infer<typeof ZCommentUpdate>;

	export const ZCommentDelete = REQUEST_CORE_SCHEMA('DELETE').extend({
		id: zod.string()
			.describe("The ID of the entity to delete"),
	});
	export type CommentDelete = zod.infer<typeof ZCommentDelete>;
	const ZCommentReadResponse = RESPONSE_CORE_SCHEMA(['READ']).extend({
		result: zod.array(ZComment)
			.describe('The array of matched entries'),
	});
	export type CommentReadResponse = zod.infer<typeof ZCommentReadResponse>;

	const ZCommentShallowReadResponse = RESPONSE_CORE_SCHEMA(['READ']).extend({
		result: zod.array(ZCommentShallow)
			.describe('The shallow array of matched entries'),
	});

	const ZCommentModifyResponse = RESPONSE_CORE_SCHEMA(['READ', 'CREATE', 'UPDATE', 'DELETE']).extend({
		result: zod.array(zod.string())
			.describe('The array of matched or manipulated responses'),
	});
	export type CommentModifyResponse = zod.infer<typeof ZCommentModifyResponse>;

	const ZCommentResponse = ZCommentReadResponse.or(ZCommentShallowReadResponse).or(ZCommentModifyResponse)
	export type CommentResponse = zod.infer<typeof ZCommentResponse>;

	export type CommentMessage =
		CommentRead
		| CommentCreate
		| CommentUpdate
		| CommentDelete;

	export const ZCommentRequest = ZCommentRead
		.or(ZCommentCreate)
		.or(ZCommentUpdate)
		.or(ZCommentDelete);
	export type CommentRequest = zod.infer<typeof ZCommentRequest>;

	export class CommentMessageValidator extends ZodValidator {

		constructor() {
			super(ZCommentRequest);
		}

	}

	export class CommentResponseValidator extends ZodValidator {

		constructor() {
			super(ZCommentResponse);
		}

	}

}
