// Generated by gen.mjs @ 2022-07-06T14:46:08.449Z - avoid editing this file by hand! 
import * as zod from 'zod';
import { BaseSchema } from '../BaseSchema';
import { ZodValidator } from '../MessageValidator';
import { EquipmentValidators } from "../equipment/EquipmentValidators";
import { UserValidators } from "../user/UserValidators";

export namespace VenueReportValidators {

    import REQUEST_CORE_SCHEMA = BaseSchema.REQUEST_CORE_SCHEMA;
    import RESPONSE_CORE_SCHEMA = BaseSchema.RESPONSE_CORE_SCHEMA;
    import ZEquipment = EquipmentValidators.ZEquipment;
    import ZUser = UserValidators.ZUser;

    export const ZVenueReport = zod.object({
        id: zod.string()
            .describe("The unique ID for this report"),
        equipment: ZEquipment
            .describe("The equipment against which this report is raised"),
        report: zod.string()
            .describe("The content of this report"),
        reporter: ZUser
            .describe("The user that produced this submission"),
        date: zod.number()
            .describe("The unix-second utc timestamp at which this report was submitted"),
        state: zod.string()
            .describe("The current state of this report"),
        resolvedDate: zod.number()
            .optional()
            .describe("The unix-second utc timestamp at which this report was resolved"),
        resolver: ZUser
            .optional()
            .describe("The user who resolved this report"),
    });
    export type VenueReportRepresentation = zod.infer<typeof ZVenueReport>;
    export const ZVenueReportShallow = zod.object({		id: zod.string()
            .describe("The unique ID for this report"),
        equipment: zod.string()
            .describe("The equipment against which this report is raised"),
        report: zod.string()
            .describe("The content of this report"),
        reporter: zod.string()
            .describe("The user that produced this submission"),
        date: zod.number()
            .describe("The unix-second utc timestamp at which this report was submitted"),
        state: zod.string()
            .describe("The current state of this report"),
        resolvedDate: zod.number()
            .optional()
            .describe("The unix-second utc timestamp at which this report was resolved"),
        resolver: zod.string()
            .describe("The user who resolved this report"),
    });
    export type VenueReportShallowRepresentation = zod.infer<typeof ZVenueReportShallow>;
    export const ZVenueReportRead = REQUEST_CORE_SCHEMA('READ').extend({
        id: zod.string().or(zod.array(zod.string()))
            .optional()
            .describe("The unique ID for this report"),
        equipment: zod.string()
            .optional()
            .describe("The equipment against which this report is raised"),
        report: zod.string()
            .optional()
            .describe("The content of this report"),
        reporter: zod.string()
            .optional()
            .describe("The user that produced this submission"),
        date: zod.object({
            greater: zod.number().optional(),
            less: zod.number().optional(),
        }).or(zod.number())
            .optional()
            .describe("The unix-second utc timestamp at which this report was submitted"),
        state: zod.string()
            .optional()
            .describe("The current state of this report"),
        resolvedDate: zod.object({
            greater: zod.number().optional(),
            less: zod.number().optional(),
        }).or(zod.number())
            .optional()
            .describe("The unix-second utc timestamp at which this report was resolved"),
        resolver: zod.string()
            .optional()
            .describe("The user who resolved this report"),
        openFor: zod.number()
            .optional()
            .describe("Returns reports that have been open for more than this amount of seconds"),
    });
    export type VenueReportRead = zod.infer<typeof ZVenueReportRead>;

    export const ZVenueReportCreate = REQUEST_CORE_SCHEMA('CREATE').extend({
        equipment: zod.string()
            .describe("The equipment against which this report is raised"),
        report: zod.string()
            .describe("The content of this report"),
        reporter: zod.string()
            .describe("The user that produced this submission"),
        date: zod.number()
            .describe("The unix-second utc timestamp at which this report was submitted"),
        state: zod.string()
            .describe("The current state of this report"),
        resolvedDate: zod.number()
            .optional()
            .describe("The unix-second utc timestamp at which this report was resolved"),
        resolver: zod.string()
            .describe("The user who resolved this report"),
    });
    export type VenueReportCreate = zod.infer<typeof ZVenueReportCreate>;

    export const ZVenueReportUpdate = REQUEST_CORE_SCHEMA('UPDATE').extend({
        id: zod.string()
            .describe("The unique ID for this report"),
        equipment: zod.string()
            .optional()
            .describe("The equipment against which this report is raised"),
        report: zod.string()
            .optional()
            .describe("The content of this report"),
        reporter: zod.string()
            .optional()
            .describe("The user that produced this submission"),
        date: zod.number()
            .optional()
            .describe("The unix-second utc timestamp at which this report was submitted"),
        state: zod.string()
            .optional()
            .describe("The current state of this report"),
        resolvedDate: zod.number()
            .optional()
            .describe("The unix-second utc timestamp at which this report was resolved"),
        resolver: zod.string()
            .optional()
            .describe("The user who resolved this report"),
    });
    export type VenueReportUpdate = zod.infer<typeof ZVenueReportUpdate>;

    export const ZVenueReportDelete = REQUEST_CORE_SCHEMA('DELETE').extend({
        id: zod.string()
            .describe("The unique identifier of this entity to remove"),
    });
    export type VenueReportDelete = zod.infer<typeof ZVenueReportDelete>;
    const ZVenueReportReadResponse = RESPONSE_CORE_SCHEMA(['READ']).extend({
        result:zod.array(ZVenueReport)
            .describe('The array of matched entries'),
    });
    export type VenueReportReadResponse = zod.infer<typeof ZVenueReportReadResponse>;

    const ZVenueReportShallowReadResponse = RESPONSE_CORE_SCHEMA(['READ']).extend({
        result:zod.array(ZVenueReportShallow)
            .describe('The shallow array of matched entries'),
    });

    const ZVenueReportModifyResponse = RESPONSE_CORE_SCHEMA(['READ', 'CREATE', 'UPDATE', 'DELETE']).extend({
        result: zod.array(zod.string())
            .describe('The array of matched or manipulated responses'),
    });
    export type VenueReportModifyResponse = zod.infer<typeof ZVenueReportModifyResponse>;

    const ZVenueReportResponse = ZVenueReportReadResponse.or(ZVenueReportShallowReadResponse).or(ZVenueReportModifyResponse)
    export type VenueReportResponse = zod.infer<typeof ZVenueReportResponse>;

    export type VenueReportMessage =
        VenueReportRead
        | VenueReportCreate
        | VenueReportUpdate
        | VenueReportDelete;

    export const ZVenueReportRequest = ZVenueReportRead
        .or(ZVenueReportCreate)
        .or(ZVenueReportUpdate)
        .or(ZVenueReportDelete);
    export type VenueReportRequest = zod.infer<typeof ZVenueReportRequest>;

    export class VenueReportMessageValidator extends ZodValidator {

        constructor() {
            super(ZVenueReportRequest);
        }

    }

    export class VenueReportResponseValidator extends ZodValidator {

        constructor() {
            super(ZVenueReportResponse);
        }

    }


}