// Generated by gen.mjs @ 2022-07-05T16:52:27.239Z - avoid editing this file by hand! 
import * as zod from 'zod';
import { BaseSchema } from '../BaseSchema';
import { ZodValidator } from '../messaging/MessageValidator';

export namespace EntStateValidators {

    import REQUEST_CORE_SCHEMA = BaseSchema.REQUEST_CORE_SCHEMA;
    import RESPONSE_CORE_SCHEMA = BaseSchema.RESPONSE_CORE_SCHEMA;

    export const ZEntState = zod.object({
        id: zod.string()
            .describe("The unique ID of this ent state"),
        name: zod.string()
            .describe("The name of this ent state"),
        color: zod.string()
            .regex(/^#?([\dA-Fa-f]{3}([\dA-Fa-f]{3})?)$/)
            .describe("The hex colour of the ent state"),
        icon: zod.string()
            .describe("The icon of this ent state, in a format that can be displayed using the frontend client"),
    });
    export type EntStateRepresentation = zod.infer<typeof ZEntState>;

    export const ZEntStateRead = REQUEST_CORE_SCHEMA('READ').extend({
        id: zod.array(zod.string())
            .optional()
            .describe("The unique ID of this ent state"),
        name: zod.string()
            .optional()
            .describe("The name of this ent state"),
        color: zod.string()
            .regex(/^#?([\dA-Fa-f]{3}([\dA-Fa-f]{3})?)$/)
            .optional()
            .describe("The hex colour of the ent state"),
        icon: zod.string()
            .optional()
            .describe("The icon of this ent state, in a format that can be displayed using the frontend client"),
    });
    export type EntStateRead = zod.infer<typeof ZEntStateRead>;

    export const ZEntStateCreate = REQUEST_CORE_SCHEMA('CREATE').extend({
        name: zod.string()
            .describe("The name of this ent state"),
        color: zod.string()
            .regex(/^#?([\dA-Fa-f]{3}([\dA-Fa-f]{3})?)$/)
            .describe("The hex colour of the ent state"),
        icon: zod.string()
            .describe("The icon of this ent state, in a format that can be displayed using the frontend client"),
    });
    export type EntStateCreate = zod.infer<typeof ZEntStateCreate>;

    export const ZEntStateUpdate = REQUEST_CORE_SCHEMA('UPDATE').extend({
        id: zod.string()
            .describe("The unique ID of this ent state"),
        name: zod.string()
            .optional()
            .describe("The name of this ent state"),
        color: zod.string()
            .regex(/^#?([\dA-Fa-f]{3}([\dA-Fa-f]{3})?)$/)
            .optional()
            .describe("The hex colour of the ent state"),
        icon: zod.string()
            .optional()
            .describe("The icon of this ent state, in a format that can be displayed using the frontend client"),
    });
    export type EntStateUpdate = zod.infer<typeof ZEntStateUpdate>;

    export const ZEntStateDelete = REQUEST_CORE_SCHEMA('DELETE').extend({
        id: zod.string()
            .describe("undefined"),
    });
    export type EntStateDelete = zod.infer<typeof ZEntStateDelete>;
    const ZEntStateReadResponse = RESPONSE_CORE_SCHEMA(['READ']).extend({
        result: zod.array(ZEntState)
            .describe('The array of matched entries'),
    });
    export type EntStateReadResponse = zod.infer<typeof ZEntStateReadResponse>;


    const ZEntStateModifyResponse = RESPONSE_CORE_SCHEMA(['READ', 'CREATE', 'UPDATE', 'DELETE']).extend({
        result: zod.array(zod.string())
            .describe('The array of matched or manipulated responses'),
    });
    export type EntStateModifyResponse = zod.infer<typeof ZEntStateModifyResponse>;

    const ZEntStateResponse = ZEntStateReadResponse.or(ZEntStateModifyResponse)
    export type EntStateResponse = zod.infer<typeof ZEntStateResponse>;

    export type EntStateMessage =
        EntStateRead
        | EntStateCreate
        | EntStateUpdate
        | EntStateDelete;

    export const ZEntStateRequest = ZEntStateRead
        .or(ZEntStateCreate)
        .or(ZEntStateUpdate)
        .or(ZEntStateDelete);
    export type EntStateRequest = zod.infer<typeof ZEntStateRequest>;

    export class EntStateMessageValidator extends ZodValidator {

        constructor() {
            super(ZEntStateRequest);
        }

    }

    export class EntStateResponseValidator extends ZodValidator {

        constructor() {
            super(ZEntStateResponse);
        }

    }


}